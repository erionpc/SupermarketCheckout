// <auto-generated />
using System;
using Checkout.Server.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Checkout.Server.Data.Migrations
{
    [DbContext(typeof(SupermarketDbContext))]
    [Migration("20200919220519_AddedReceiptItemEntity")]
    partial class AddedReceiptItemEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Checkout.Server.Data.Entities.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("PosId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ItemId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfe604d6-9410-415e-9450-f8df8d3777b0"),
                            Description = "Apple",
                            SKU = "A"
                        },
                        new
                        {
                            Id = new Guid("67b729b7-f659-4541-82a9-a6f1a005d99c"),
                            Description = "Banana",
                            SKU = "B"
                        },
                        new
                        {
                            Id = new Guid("fa262d42-6318-40a2-8a9e-12f3e32c270a"),
                            Description = "Carrot",
                            SKU = "C"
                        },
                        new
                        {
                            Id = new Guid("de5abc1b-4eff-495b-96c3-ae5ad282c3a3"),
                            Description = "Dragon fruit",
                            SKU = "D"
                        });
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.ItemPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemPrices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e845c62a-11d5-41e4-ae14-391f54c2f0e7"),
                            Amount = 50m,
                            ItemId = new Guid("bfe604d6-9410-415e-9450-f8df8d3777b0"),
                            Quantity = 1,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        },
                        new
                        {
                            Id = new Guid("8f856f06-bf92-4ac9-bf7d-b1cb55302c7d"),
                            Amount = 130m,
                            ItemId = new Guid("bfe604d6-9410-415e-9450-f8df8d3777b0"),
                            Quantity = 3,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        },
                        new
                        {
                            Id = new Guid("2305f9e8-4682-4142-a18a-4fe6e502b76f"),
                            Amount = 160m,
                            ItemId = new Guid("bfe604d6-9410-415e-9450-f8df8d3777b0"),
                            Quantity = 4,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        },
                        new
                        {
                            Id = new Guid("9420070c-91c4-470a-85cd-3b8112d62916"),
                            Amount = 180m,
                            ItemId = new Guid("bfe604d6-9410-415e-9450-f8df8d3777b0"),
                            Quantity = 5,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        },
                        new
                        {
                            Id = new Guid("45ecf056-6690-4260-ab48-e52b62cc3274"),
                            Amount = 30m,
                            ItemId = new Guid("67b729b7-f659-4541-82a9-a6f1a005d99c"),
                            Quantity = 1,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        },
                        new
                        {
                            Id = new Guid("020f0702-a802-4832-ba3a-431ecb55856e"),
                            Amount = 45m,
                            ItemId = new Guid("67b729b7-f659-4541-82a9-a6f1a005d99c"),
                            Quantity = 2,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        },
                        new
                        {
                            Id = new Guid("afff9c47-d98e-4c6a-a995-a39ebeda8393"),
                            Amount = 20m,
                            ItemId = new Guid("fa262d42-6318-40a2-8a9e-12f3e32c270a"),
                            Quantity = 1,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        },
                        new
                        {
                            Id = new Guid("0dce5c00-dd37-4ff6-aaae-e5c51dda3f4c"),
                            Amount = 15m,
                            ItemId = new Guid("de5abc1b-4eff-495b-96c3-ae5ad282c3a3"),
                            Quantity = 1,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999)
                        });
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.PointOfSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("PointsOfSale");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59cc636e-7359-4694-aaec-b3eb0f9023e1"),
                            ShopId = new Guid("10073eed-e42e-4e7a-b53d-8731c26c729e")
                        });
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.ReceiptItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfferText")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ItemId");

                    b.ToTable("ReceiptItems");
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10073eed-e42e-4e7a-b53d-8731c26c729e"),
                            Description = "The ABCD shop"
                        });
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.Basket", b =>
                {
                    b.HasOne("Checkout.Server.Data.Entities.PointOfSale", "PointOfSale")
                        .WithMany("Baskets")
                        .HasForeignKey("PosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.BasketItem", b =>
                {
                    b.HasOne("Checkout.Server.Data.Entities.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Checkout.Server.Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.ItemPrice", b =>
                {
                    b.HasOne("Checkout.Server.Data.Entities.Item", "Item")
                        .WithMany("Prices")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.PointOfSale", b =>
                {
                    b.HasOne("Checkout.Server.Data.Entities.Shop", "Shop")
                        .WithMany("PointsOfSale")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Checkout.Server.Data.Entities.ReceiptItem", b =>
                {
                    b.HasOne("Checkout.Server.Data.Entities.Basket", "Basket")
                        .WithMany("ReceiptItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Checkout.Server.Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
